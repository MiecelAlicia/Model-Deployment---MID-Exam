# -*- coding: utf-8 -*-
"""app2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F_gKiVEJKOfnH-B-IpAbR182kaVNY7FZ
"""

import streamlit as st
import joblib
import pandas as pd
import traceback

data = joblib.load("xgb_loan_model.pkl")
model = data["model"]
scaler = data["scaler"]

st.title("üìä Loan Status Prediction App - Mid Exam Model Deployment")

person_age = st.number_input("Applicant's Age", min_value=18, max_value=70, value=30)
person_income = st.number_input("Applicant's Annual Income", min_value=0, value=50000)
person_emp_exp = st.number_input("Years of Work Experience", min_value=0, value=5)
loan_amnt = st.number_input("Requested Loan Amount", min_value=0, value=10000)
loan_int_rate = st.number_input("Loan Interest Rate (%)", min_value=0.0, value=12.5)
loan_percent_income = loan_amnt / person_income if person_income != 0 else 0

credit_score = st.slider("Credit Score", 300, 850, value=700)
cred_hist_len = st.slider("Credit History Length (Years)", 1, 30, value=5)

gender = st.selectbox("Gender", ["female", "male"])
home = st.selectbox("Home Ownership", ["Rent", "Own", "Mortgage", "Other"])
intent = st.selectbox("Loan Purpose", ["Education", "Medical", "Venture", "Home Improvement", "Debt Consolidation", "Personal"])
education = st.selectbox("Education Level", ["High School", "Associate", "Bachelor", "Master", "Doctorate"])
default = st.selectbox("Previous Loan Default Record?", ["Yes", "No"])

education_map = {'High School': 1, 'Associate': 2, 'Bachelor': 3, 'Master': 4, 'Doctorate': 5}
education_val = education_map[education]
default_val = 1 if default == "Yes" else 0

gender_cols = {'female': [1, 0], 'male': [0, 1]}
home_onehot = [1 if home == val else 0 for val in ["Mortgage", "Other", "Own", "Rent"]]
intent_onehot = [1 if intent == val else 0 for val in ["Debt Consolidation", "Education", "Home Improvement", "Medical", "Personal", "Venture"]]

feature_names = [
    'person_age', 'person_income', 'person_emp_exp', 'loan_amnt', 'loan_int_rate',
    'loan_percent_income', 'cb_person_cred_hist_length', 'credit_score',
    'person_gender_female', 'person_gender_male', 'person_home_ownership_MORTGAGE',
    'person_home_ownership_OTHER', 'person_home_ownership_OWN', 'person_home_ownership_RENT',
    'loan_intent_DEBTCONSOLIDATION', 'loan_intent_EDUCATION', 'loan_intent_HOMEIMPROVEMENT',
    'loan_intent_MEDICAL', 'loan_intent_PERSONAL', 'loan_intent_VENTURE', 'person_education',
    'previous_loan_defaults_on_file'
]

input_data = pd.DataFrame([[
    person_age,
    person_income,
    person_emp_exp,
    loan_amnt,
    loan_int_rate,
    loan_percent_income,
    cred_hist_len,
    credit_score,
    *gender_cols[gender],
    *home_onehot,
    *intent_onehot,
    education_val,
    default_val
]], columns=feature_names)

if st.button("Predict Loan Status"):
    try:
        model_feature_names = model.get_booster().feature_names

        if set(model_feature_names) != set(input_data.columns):
            st.error("Mismatch between model feature names and input data columns.")
        else:
            input_data = input_data[model_feature_names]
            scaled_input = scaler.transform(input_data)
            prediction = model.predict(scaled_input)[0]

            result = "‚úÖ Approved (1)" if prediction == 1 else "‚ùå Rejected (0)"
            st.success(f"Prediction Result: {result}")

    except Exception as e:
        error_message = traceback.format_exc()
        st.error(f"Error occurred: {error_message}")

